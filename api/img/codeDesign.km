{
    "root": {
        "data": {
            "id": "cx3boqe16u80",
            "created": 1700451324893,
            "text": "design",
            "note": "组合 继承 中介\n使用场景，实现方式"
        },
        "children": [
            {
                "data": {
                    "id": "cx3byuhla7s0",
                    "created": 1700452117456,
                    "text": "创建型",
                    "note": "提供创建对象的机制， 能够提升已有代码的灵活性和可复用性"
                },
                "children": [
                    {
                        "data": {
                            "id": "cx3eznyi1z40",
                            "created": 1700460644935,
                            "text": "工厂方法模式"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cx3f01gc8w80",
                            "created": 1700460674312,
                            "text": "抽象工厂模式"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cx3f04qltsw0",
                            "created": 1700460681463,
                            "text": "单例模式",
                            "note": "1. 双重校验锁\n2. 静态内部类\n3. 枚举（序列化，线程安全）"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cx3h7l1i9pk0",
                            "created": 1700466907720,
                            "text": "原型模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3h7n1t08w0",
                                    "created": 1700466912092,
                                    "text": "使你能够复制已有对象， 而又无需使代码依赖它们所属的类。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3hh3errqg0",
                            "created": 1700467652982,
                            "text": "生成器模式"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cx3bzsvcoh40",
                    "created": 1700452192299,
                    "text": "结构性",
                    "note": "将对象和类组装成较大的**结构**， 并同时保持结构的灵活和高效。"
                },
                "children": [
                    {
                        "data": {
                            "id": "cx3h832o6bk0",
                            "created": 1700466946972,
                            "text": "适配器模式",
                            "note": "中介类实现"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3h851cdww0",
                                    "created": 1700466951246,
                                    "text": "使接口不兼容的对象能够相互合作"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3h99gevqo0",
                            "created": 1700467039228,
                            "text": "桥接模式",
                            "note": "1. 拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类）\n2. 如果你希望在几个独立维度上扩展一个类，"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3h9bibb480",
                                    "created": 1700467043697,
                                    "text": "可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构， 从而能在开发时分别使用"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3hd6421p40",
                            "created": 1700467345407,
                            "text": "组合模式",
                            "priority": 9
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3hdbj43s00",
                                    "created": 1700467357202,
                                    "text": "可以使用它将对象组合成树状结构， 并且能像使用独立对象一样使用它们。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3het4mx340",
                            "created": 1700467473873,
                            "text": "装饰模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3heyakxpk0",
                                    "created": 1700467485116,
                                    "text": "允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3hf8te7aw0",
                            "created": 1700467508022,
                            "text": "外观模式",
                            "note": "1.外观模式为现有对象定义了一个新接口， 适配器模式则会试图运用已有的接口。\n2.适配器通常只封装一个对象， 外观通常会作用于整个对象子系统上。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3hfs8qke80",
                                    "created": 1700467550308,
                                    "text": "为程序库、 框架或其他复杂类提供一个简单的接口"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3hubj994o0",
                            "created": 1700468689402,
                            "text": "享元模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3hujf4fow0",
                                    "created": 1700468706565,
                                    "text": "用共享技术有效地支持大量细粒度的对象，能够解决重复对象的内存浪费问题"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cx3bzung34o0",
                    "created": 1700452196175,
                    "text": "行为型",
                    "note": "负责对象间的高效沟通和职责委派"
                },
                "children": [
                    {
                        "data": {
                            "id": "cx3f3xa3ylc0",
                            "created": 1700460978685,
                            "text": "责任链模式",
                            "note": "你可以控制请求处理的顺序。\n1. 单一职责原则。 你可对发起操作和执行操作的类进行解耦。\n2. 开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3f4ocaj8g0",
                                    "created": 1700461037590,
                                    "text": "当程序需要使用不同方式处理不同种类请求， 而且请求类型和顺序预先未知时， 可以使用责任链模式。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3fgra4kcg0",
                            "created": 1700461984359,
                            "text": "命令模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3fgwcmu0w0",
                                    "created": 1700461995395,
                                    "text": "实现操作回滚功能，将操作放入队列中，"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cx3fkjn80ps0",
                                    "created": 1700462281194,
                                    "text": "通过操作来参数化对象"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3flcwr7680",
                            "created": 1700462344897,
                            "text": "迭代器模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3floczum80",
                                    "created": 1700462369823,
                                    "text": "不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3ggl0r93s0",
                            "created": 1700464791842,
                            "text": "模版方法模式",
                            "note": "- 模板方法基于**继承**机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 \n- 策略模式基于*组合*机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 \n模板方法在类层次上运作， 因此它是静态的。 \n策略在对象层次上运作， 因此允许在运行时切换行为。\n\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3ggo71rjs0",
                                    "created": 1700464798753,
                                    "text": "它在超类中定义了一个算法的框架， 允许子类在不修改结构的情况下重写算法的特定步骤。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3glca033s0",
                            "created": 1700465164631,
                            "text": "策略模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3go9cicwg0",
                                    "created": 1700465393345,
                                    "text": "策略通常可用于描述完成某件事的不同方式， 让你能够在同一个上下文类中切换算法"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3gqst7nao0",
                            "created": 1700465592442,
                            "text": "访问者模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3gquufslc0",
                                    "created": 1700465596870,
                                    "text": "辅助行为业务逻辑，操作复杂结构对象"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3gwgevebs0",
                            "created": 1700466035638,
                            "text": "状态模式",
                            "note": "对象的行为取决于它的状态，并且需要在运行时根据状态改变行为。\n对象有大量相似的状态，且状态之间存在转换关系。\n需要通过状态转换来控制对象的行为。"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3gy0dpmug0",
                                    "created": 1700466157468,
                                    "text": "能在一个对象的内部状态变化时改变其行为， 使其看上去就像改变了自身所属的类一样。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3gwppsx0w0",
                            "created": 1700466055890,
                            "text": "观察者模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3gwy231go0",
                                    "created": 1700466074047,
                                    "text": "允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cx3gxcwgv4g0",
                            "created": 1700466106359,
                            "text": "中介者模式"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cx3gxgpbnmo0",
                                    "created": 1700466114634,
                                    "text": "迫使它们通过一个中介者对象进行合作，能让你减少对象之间混乱无序的依赖关系"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "classic-compact",
    "version": "1.4.43"
}